print("RESTART CODE") 

import ifcopenshell  

from bonsai.bim.ifc import IfcStore  

model = IfcStore.get_file()  

  

#WALLS 

walls=model.by_type("IfcWall") 

total_volume_wall = 0  # Initialize a variable to store the total volume 

  

for entity in walls: 

    wall_thickness = None 

    wall_area = None 

    wallName = None 

  

    # Retrieve wall properties for name and area 

    for relDefinesByProperties in entity.IsDefinedBy: 

        if relDefinesByProperties.is_a("IfcRelDefinesByProperties"): 

            if relDefinesByProperties.RelatingPropertyDefinition.is_a("IfcPropertySet"): 

                for prop in relDefinesByProperties.RelatingPropertyDefinition.HasProperties: 

                    if prop.Name == 'Reference': 

                        wallName = prop.NominalValue.wrappedValue if prop.NominalValue else None 

                    elif prop.Name == 'Area': 

                        wall_area = prop.NominalValue.wrappedValue if prop.NominalValue else None 

  

    # Retrieve the wall thickness 

    material_associations = entity.HasAssociations 

    if material_associations: 

        for association in material_associations: 

            if association.is_a("IfcRelAssociatesMaterial"): 

                material = association.RelatingMaterial 

                # Check if it has layers with thickness 

                if material.is_a("IfcMaterialLayerSetUsage") or material.is_a("IfcMaterialLayerSet"): 

                    for layer in material.MaterialLayers: 

                        wall_thickness = layer.LayerThickness / 1000  # Convert thickness from mm to m 

                        break  # Take the first layer thickness if multiple layers are present 

  

    # Calculate the volume for concrete walls 

    if wallName and "concrete" in wallName.lower() and wall_area and wall_thickness: 

        wall_volume = wall_area * wall_thickness 

        #print(f"\nWall Reference: {wallName}") 

        #print(f"Area: {wall_area} m²") 

        #print(f"Thickness: {wall_thickness} m") 

        #print(f"Volume: {wall_volume:.3f} m³") 

  

        total_volume_wall += wall_volume  # Add to total volume 

  

# Print the total volume of all concrete walls 

print(f"Total volume of concrete walls: {total_volume_wall:.3f} m³") 

  

#SLABS 

slabs=model.by_type("IfcSlab") 

total_volume_slab = 0  # Initialize a variable to store the total volume 

  

# Loop through all slabs in the IFC model 

for entity in slabs: 

    slab_thickness = None 

    slab_area = None 

    slab_name = None 

  

    # Retrieve slab properties for name and area 

    for relDefinesByProperties in entity.IsDefinedBy: 

        if relDefinesByProperties.is_a("IfcRelDefinesByProperties"): 

            if relDefinesByProperties.RelatingPropertyDefinition.is_a("IfcPropertySet"): 

                for prop in relDefinesByProperties.RelatingPropertyDefinition.HasProperties: 

                    if prop.Name == 'Reference': 

                        slab_name = prop.NominalValue.wrappedValue if prop.NominalValue else None 

                    elif prop.Name == 'Area': 

                        slab_area = prop.NominalValue.wrappedValue if prop.NominalValue else None 

  

    # Retrieve the slab thickness 

    material_associations = entity.HasAssociations 

    if material_associations: 

        for association in material_associations: 

            if association.is_a("IfcRelAssociatesMaterial"): 

                material = association.RelatingMaterial 

                # Check if it has a material layer set usage 

                if material.is_a("IfcMaterialLayerSetUsage"): 

                    # Access the material layer set through the material layer set usage 

                    material_layer_set = material.ForLayerSet 

                    if material_layer_set: 

                        # Get the layers from the material layer set 

                        for layer in material_layer_set.MaterialLayers: 

                            slab_thickness = layer.LayerThickness / 1000  # Convert thickness from mm to m 

                            break  # Take the first layer thickness if multiple layers are present 

  

    # Calculate the volume for slabs with "concrete" in the name 

    if slab_name and "concrete" in slab_name.lower() and slab_area and slab_thickness: 

        slab_volume = slab_area * slab_thickness 

        #print(f"\nSlab Reference: {slab_name}") 

        #print(f"Area: {slab_area} m²") 

        #print(f"Thickness: {slab_thickness} m") 

        #print(f"Volume: {slab_volume:.3f} m³") 

  

        total_volume_slab += slab_volume  # Add to total volume 

  

# Print the total volume of all concrete slabs 

print(f"Total volume of concrete slabs: {total_volume_slab:.3f} m³") 

  

  

#COLUMNS 

columns=model.by_type("IfcColumn") 

total_volume_column = 0  # Initialize a variable to store the total volume 

  

# Loop through all columns in the IFC model 

for entity in columns: 

    column_name = None 

    column_volume = None 

  

    # Retrieve column properties for name and volume 

    for relDefinesByProperties in entity.IsDefinedBy: 

        if relDefinesByProperties.is_a("IfcRelDefinesByProperties"): 

            if relDefinesByProperties.RelatingPropertyDefinition.is_a("IfcPropertySet"): 

                for prop in relDefinesByProperties.RelatingPropertyDefinition.HasProperties: 

                    if prop.Name == 'Reference': 

                        column_name = prop.NominalValue.wrappedValue if prop.NominalValue else None 

                    elif prop.Name == 'Volume': 

                        column_volume = prop.NominalValue.wrappedValue if prop.NominalValue else None 

  

    # Calculate the volume for columns with "concrete" in the name 

    if column_name and "concrete" in column_name.lower() and column_volume: 

        #print(f"\nColumn Reference: {column_name}") 

        #print(f"Volume: {column_volume:.3f} m³") 

  

        total_volume_column += column_volume  # Add to total volume 

  

# Print the total volume of all concrete slabs 

print(f"Total volume of concrete columns: {total_volume_column:.3f} m³") 

  

#GFA without basement 

slabs = model.by_type("IfcSlab") 

total_area_slab = 0  # Initialize a variable to store the total area 

  

# Loop through all slabs in the IFC model 

for entity in slabs: 

    slab_area = None 

    slab_elevation = None 

  

    # Retrieve slab properties for area 

    for relDefinesByProperties in entity.IsDefinedBy: 

        if relDefinesByProperties.is_a("IfcRelDefinesByProperties"): 

            if relDefinesByProperties.RelatingPropertyDefinition.is_a("IfcPropertySet"): 

                for prop in relDefinesByProperties.RelatingPropertyDefinition.HasProperties: 

                    if prop.Name == 'Area': 

                        slab_area = prop.NominalValue.wrappedValue if prop.NominalValue else None 

  

    # Retrieve the elevation of the slab (level or placement in the model) 

    if entity.ObjectPlacement: 

        placement = entity.ObjectPlacement 

        if placement.is_a("IfcLocalPlacement"): 

            relative_placement = placement.RelativePlacement 

            if relative_placement and relative_placement.is_a("IfcAxis2Placement3D"): 

                if relative_placement.Location: 

                    slab_elevation = relative_placement.Location.Coordinates[2]  # Get Z-coordinate 

  

    # Check if slab is on or above level 0 and add its area 

    if slab_elevation is not None and slab_elevation >= 0 and slab_area: 

        total_area_slab += slab_area  # Add to total area 

  

# Print the total slab area 

#print(f"GFA: {total_area_slab:.2f} m²") 

  

#Calculate the CO2 footprint for specified material  

total_volume_concrete = total_volume_column + total_volume_slab + total_volume_wall  

print(f"Total volume of concrete in model: { total_volume_concrete:.2f} m³") 

CO2_concrete = total_volume_concrete * 300/(50*total_area_slab) 

print(f"\nEstimated CO2 footprint for concrete elements: { CO2_concrete:.2f} kg. CO2-eq./m²/yr") 
